{"ast":null,"code":"import { Injectable, EventEmitter, InjectionToken, Inject, Directive, ElementRef, ChangeDetectorRef, Input, Pipe, NgModule } from '@angular/core';\nimport { of, isObservable, forkJoin, concat, defer } from 'rxjs';\nimport { take, shareReplay, map, concatMap, switchMap } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.loader.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n */\n\nclass TranslateLoader {}\n\nif (false) {\n  /**\n   * @abstract\n   * @param {?} lang\n   * @return {?}\n   */\n  TranslateLoader.prototype.getTranslation = function (lang) {};\n}\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\n\n\nclass TranslateFakeLoader extends TranslateLoader {\n  /**\n   * @param {?} lang\n   * @return {?}\n   */\n  getTranslation(lang) {\n    return of({});\n  }\n\n}\n\nTranslateFakeLoader.decorators = [{\n  type: Injectable\n}];\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/missing-translation-handler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @record\n */\n\nfunction MissingTranslationHandlerParams() {}\n\nif (false) {\n  /**\n   * the key that's missing in translation files\n   * @type {?}\n   */\n  MissingTranslationHandlerParams.prototype.key;\n  /**\n   * an instance of the service that was unable to translate the key.\n   * @type {?}\n   */\n\n  MissingTranslationHandlerParams.prototype.translateService;\n  /**\n   * interpolation params that were passed along for translating the given key.\n   * @type {?|undefined}\n   */\n\n  MissingTranslationHandlerParams.prototype.interpolateParams;\n}\n/**\n * @abstract\n */\n\n\nclass MissingTranslationHandler {}\n\nif (false) {\n  /**\n   * A function that handles missing translations.\n   *\n   * @abstract\n   * @param {?} params context for resolving a missing translation\n   * @return {?} a value or an observable\n   * If it returns a value, then this value is used.\n   * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\n   * If it doesn't return then the key will be used as a value\n   */\n  MissingTranslationHandler.prototype.handle = function (params) {};\n}\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\n\n\nclass FakeMissingTranslationHandler {\n  /**\n   * @param {?} params\n   * @return {?}\n   */\n  handle(params) {\n    return params.key;\n  }\n\n}\n\nFakeMissingTranslationHandler.decorators = [{\n  type: Injectable\n}];\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/util.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/* tslint:disable */\n\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param {?} o1 Object or value to compare.\n * @param {?} o2 Object or value to compare.\n * @return {?} true if arguments are equal.\n */\n\nfunction equals(o1, o2) {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  // NaN === NaN\n\n  /** @type {?} */\n\n  let t1 = typeof o1;\n  /** @type {?} */\n\n  let t2 = typeof o2;\n  /** @type {?} */\n\n  let length;\n  /** @type {?} */\n\n  let key;\n  /** @type {?} */\n\n  let keySet;\n\n  if (t1 == t2 && t1 == 'object') {\n    if (Array.isArray(o1)) {\n      if (!Array.isArray(o2)) return false;\n\n      if ((length = o1.length) == o2.length) {\n        for (key = 0; key < length; key++) {\n          if (!equals(o1[key], o2[key])) return false;\n        }\n\n        return true;\n      }\n    } else {\n      if (Array.isArray(o2)) {\n        return false;\n      }\n\n      keySet = Object.create(null);\n\n      for (key in o1) {\n        if (!equals(o1[key], o2[key])) {\n          return false;\n        }\n\n        keySet[key] = true;\n      }\n\n      for (key in o2) {\n        if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n}\n/* tslint:enable */\n\n/**\n * @param {?} value\n * @return {?}\n */\n\n\nfunction isDefined(value) {\n  return typeof value !== 'undefined' && value !== null;\n}\n/**\n * @param {?} item\n * @return {?}\n */\n\n\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n/**\n * @param {?} target\n * @param {?} source\n * @return {?}\n */\n\n\nfunction mergeDeep(target, source) {\n  /** @type {?} */\n  let output = Object.assign({}, target);\n\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach(\n    /**\n    * @param {?} key\n    * @return {?}\n    */\n    key => {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, {\n            [key]: source[key]\n          });\n        } else {\n          output[key] = mergeDeep(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, {\n          [key]: source[key]\n        });\n      }\n    });\n  }\n\n  return output;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.parser.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n */\n\n\nclass TranslateParser {}\n\nif (false) {\n  /**\n   * Interpolates a string to replace parameters\n   * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n   * @abstract\n   * @param {?} expr\n   * @param {?=} params\n   * @return {?}\n   */\n  TranslateParser.prototype.interpolate = function (expr, params) {};\n  /**\n   * Gets a value from an object by composed key\n   * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n   * @abstract\n   * @param {?} target\n   * @param {?} key\n   * @return {?}\n   */\n\n\n  TranslateParser.prototype.getValue = function (target, key) {};\n}\n\nclass TranslateDefaultParser extends TranslateParser {\n  constructor() {\n    super(...arguments);\n    this.templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\n  }\n  /**\n   * @param {?} expr\n   * @param {?=} params\n   * @return {?}\n   */\n\n\n  interpolate(expr, params) {\n    /** @type {?} */\n    let result;\n\n    if (typeof expr === 'string') {\n      result = this.interpolateString(expr, params);\n    } else if (typeof expr === 'function') {\n      result = this.interpolateFunction(expr, params);\n    } else {\n      // this should not happen, but an unrelated TranslateService test depends on it\n      result =\n      /** @type {?} */\n      expr;\n    }\n\n    return result;\n  }\n  /**\n   * @param {?} target\n   * @param {?} key\n   * @return {?}\n   */\n\n\n  getValue(target, key) {\n    /** @type {?} */\n    let keys = typeof key === 'string' ? key.split('.') : [key];\n    key = '';\n\n    do {\n      key += keys.shift();\n\n      if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n        target = target[key];\n        key = '';\n      } else if (!keys.length) {\n        target = undefined;\n      } else {\n        key += '.';\n      }\n    } while (keys.length);\n\n    return target;\n  }\n  /**\n   * @private\n   * @param {?} fn\n   * @param {?=} params\n   * @return {?}\n   */\n\n\n  interpolateFunction(fn, params) {\n    return fn(params);\n  }\n  /**\n   * @private\n   * @param {?} expr\n   * @param {?=} params\n   * @return {?}\n   */\n\n\n  interpolateString(expr, params) {\n    if (!params) {\n      return expr;\n    }\n\n    return expr.replace(this.templateMatcher,\n    /**\n    * @param {?} substring\n    * @param {?} b\n    * @return {?}\n    */\n    (substring, b) => {\n      /** @type {?} */\n      let r = this.getValue(params, b);\n      return isDefined(r) ? r : substring;\n    });\n  }\n\n}\n\nTranslateDefaultParser.decorators = [{\n  type: Injectable\n}];\n\nif (false) {\n  /** @type {?} */\n  TranslateDefaultParser.prototype.templateMatcher;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.compiler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n */\n\n\nclass TranslateCompiler {}\n\nif (false) {\n  /**\n   * @abstract\n   * @param {?} value\n   * @param {?} lang\n   * @return {?}\n   */\n  TranslateCompiler.prototype.compile = function (value, lang) {};\n  /**\n   * @abstract\n   * @param {?} translations\n   * @param {?} lang\n   * @return {?}\n   */\n\n\n  TranslateCompiler.prototype.compileTranslations = function (translations, lang) {};\n}\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\n\n\nclass TranslateFakeCompiler extends TranslateCompiler {\n  /**\n   * @param {?} value\n   * @param {?} lang\n   * @return {?}\n   */\n  compile(value, lang) {\n    return value;\n  }\n  /**\n   * @param {?} translations\n   * @param {?} lang\n   * @return {?}\n   */\n\n\n  compileTranslations(translations, lang) {\n    return translations;\n  }\n\n}\n\nTranslateFakeCompiler.decorators = [{\n  type: Injectable\n}];\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.store.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nclass TranslateStore {\n  constructor() {\n    /**\n     * The lang currently used\n     */\n    this.currentLang = this.defaultLang;\n    /**\n     * a list of translations per lang\n     */\n\n    this.translations = {};\n    /**\n     * an array of langs\n     */\n\n    this.langs = [];\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     */\n\n    this.onTranslationChange = new EventEmitter();\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     */\n\n    this.onLangChange = new EventEmitter();\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     */\n\n    this.onDefaultLangChange = new EventEmitter();\n  }\n\n}\n\nif (false) {\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   * @type {?}\n   */\n  TranslateStore.prototype.defaultLang;\n  /**\n   * The lang currently used\n   * @type {?}\n   */\n\n  TranslateStore.prototype.currentLang;\n  /**\n   * a list of translations per lang\n   * @type {?}\n   */\n\n  TranslateStore.prototype.translations;\n  /**\n   * an array of langs\n   * @type {?}\n   */\n\n  TranslateStore.prototype.langs;\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n   *     // do something\n   * });\n   * @type {?}\n   */\n\n  TranslateStore.prototype.onTranslationChange;\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n   *     // do something\n   * });\n   * @type {?}\n   */\n\n  TranslateStore.prototype.onLangChange;\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n   *     // do something\n   * });\n   * @type {?}\n   */\n\n  TranslateStore.prototype.onDefaultLangChange;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst USE_STORE = new InjectionToken('USE_STORE');\n/** @type {?} */\n\nconst USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\n/** @type {?} */\n\nconst DEFAULT_LANGUAGE = new InjectionToken('DEFAULT_LANGUAGE');\n/** @type {?} */\n\nconst USE_EXTEND = new InjectionToken('USE_EXTEND');\n/**\n * @record\n */\n\nfunction TranslationChangeEvent() {}\n\nif (false) {\n  /** @type {?} */\n  TranslationChangeEvent.prototype.translations;\n  /** @type {?} */\n\n  TranslationChangeEvent.prototype.lang;\n}\n/**\n * @record\n */\n\n\nfunction LangChangeEvent() {}\n\nif (false) {\n  /** @type {?} */\n  LangChangeEvent.prototype.lang;\n  /** @type {?} */\n\n  LangChangeEvent.prototype.translations;\n}\n/**\n * @record\n */\n\n\nfunction DefaultLangChangeEvent() {}\n\nif (false) {\n  /** @type {?} */\n  DefaultLangChangeEvent.prototype.lang;\n  /** @type {?} */\n\n  DefaultLangChangeEvent.prototype.translations;\n}\n\nclass TranslateService {\n  /**\n   *\n   * @param {?} store an instance of the store (that is supposed to be unique)\n   * @param {?} currentLoader An instance of the loader currently used\n   * @param {?} compiler An instance of the compiler currently used\n   * @param {?} parser An instance of the parser currently used\n   * @param {?} missingTranslationHandler A handler for missing translations.\n   * @param {?=} useDefaultLang whether we should use default language translation when current language translation is missing.\n   * @param {?=} isolate whether this service should use the store or not\n   * @param {?=} extend To make a child module extend (and use) translations from parent modules.\n   * @param {?=} defaultLanguage Set the default language using configuration\n   */\n  constructor(store, currentLoader, compiler, parser, missingTranslationHandler, useDefaultLang = true, isolate = false, extend = false, defaultLanguage) {\n    this.store = store;\n    this.currentLoader = currentLoader;\n    this.compiler = compiler;\n    this.parser = parser;\n    this.missingTranslationHandler = missingTranslationHandler;\n    this.useDefaultLang = useDefaultLang;\n    this.isolate = isolate;\n    this.extend = extend;\n    this.pending = false;\n    this._onTranslationChange = new EventEmitter();\n    this._onLangChange = new EventEmitter();\n    this._onDefaultLangChange = new EventEmitter();\n    this._langs = [];\n    this._translations = {};\n    this._translationRequests = {};\n    /** set the default language from configuration */\n\n    if (defaultLanguage) {\n      this.setDefaultLang(defaultLanguage);\n    }\n  }\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n   *     // do something\n   * });\n   * @return {?}\n   */\n\n\n  get onTranslationChange() {\n    return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n  }\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n   *     // do something\n   * });\n   * @return {?}\n   */\n\n\n  get onLangChange() {\n    return this.isolate ? this._onLangChange : this.store.onLangChange;\n  }\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n   *     // do something\n   * });\n   * @return {?}\n   */\n\n\n  get onDefaultLangChange() {\n    return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n  }\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   * @return {?}\n   */\n\n\n  get defaultLang() {\n    return this.isolate ? this._defaultLang : this.store.defaultLang;\n  }\n  /**\n   * @param {?} defaultLang\n   * @return {?}\n   */\n\n\n  set defaultLang(defaultLang) {\n    if (this.isolate) {\n      this._defaultLang = defaultLang;\n    } else {\n      this.store.defaultLang = defaultLang;\n    }\n  }\n  /**\n   * The lang currently used\n   * @return {?}\n   */\n\n\n  get currentLang() {\n    return this.isolate ? this._currentLang : this.store.currentLang;\n  }\n  /**\n   * @param {?} currentLang\n   * @return {?}\n   */\n\n\n  set currentLang(currentLang) {\n    if (this.isolate) {\n      this._currentLang = currentLang;\n    } else {\n      this.store.currentLang = currentLang;\n    }\n  }\n  /**\n   * an array of langs\n   * @return {?}\n   */\n\n\n  get langs() {\n    return this.isolate ? this._langs : this.store.langs;\n  }\n  /**\n   * @param {?} langs\n   * @return {?}\n   */\n\n\n  set langs(langs) {\n    if (this.isolate) {\n      this._langs = langs;\n    } else {\n      this.store.langs = langs;\n    }\n  }\n  /**\n   * a list of translations per lang\n   * @return {?}\n   */\n\n\n  get translations() {\n    return this.isolate ? this._translations : this.store.translations;\n  }\n  /**\n   * @param {?} translations\n   * @return {?}\n   */\n\n\n  set translations(translations) {\n    if (this.isolate) {\n      this._translations = translations;\n    } else {\n      this.store.translations = translations;\n    }\n  }\n  /**\n   * Sets the default language to use as a fallback\n   * @param {?} lang\n   * @return {?}\n   */\n\n\n  setDefaultLang(lang) {\n    if (lang === this.defaultLang) {\n      return;\n    }\n    /** @type {?} */\n\n\n    let pending = this.retrieveTranslations(lang);\n\n    if (typeof pending !== \"undefined\") {\n      // on init set the defaultLang immediately\n      if (this.defaultLang == null) {\n        this.defaultLang = lang;\n      }\n\n      pending.pipe(take(1)).subscribe(\n      /**\n      * @param {?} res\n      * @return {?}\n      */\n      res => {\n        this.changeDefaultLang(lang);\n      });\n    } else {\n      // we already have this language\n      this.changeDefaultLang(lang);\n    }\n  }\n  /**\n   * Gets the default language used\n   * @return {?}\n   */\n\n\n  getDefaultLang() {\n    return this.defaultLang;\n  }\n  /**\n   * Changes the lang currently used\n   * @param {?} lang\n   * @return {?}\n   */\n\n\n  use(lang) {\n    // don't change the language if the language given is already selected\n    if (lang === this.currentLang) {\n      return of(this.translations[lang]);\n    }\n    /** @type {?} */\n\n\n    let pending = this.retrieveTranslations(lang);\n\n    if (typeof pending !== \"undefined\") {\n      // on init set the currentLang immediately\n      if (!this.currentLang) {\n        this.currentLang = lang;\n      }\n\n      pending.pipe(take(1)).subscribe(\n      /**\n      * @param {?} res\n      * @return {?}\n      */\n      res => {\n        this.changeLang(lang);\n      });\n      return pending;\n    } else {\n      // we have this language, return an Observable\n      this.changeLang(lang);\n      return of(this.translations[lang]);\n    }\n  }\n  /**\n   * Retrieves the given translations\n   * @private\n   * @param {?} lang\n   * @return {?}\n   */\n\n\n  retrieveTranslations(lang) {\n    /** @type {?} */\n    let pending; // if this language is unavailable or extend is true, ask for it\n\n    if (typeof this.translations[lang] === \"undefined\" || this.extend) {\n      this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n      pending = this._translationRequests[lang];\n    }\n\n    return pending;\n  }\n  /**\n   * Gets an object of translations for a given language with the current loader\n   * and passes it through the compiler\n   * @param {?} lang\n   * @return {?}\n   */\n\n\n  getTranslation(lang) {\n    this.pending = true;\n    /** @type {?} */\n\n    const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(shareReplay(1), take(1));\n    this.loadingTranslations = loadingTranslations.pipe(map(\n    /**\n    * @param {?} res\n    * @return {?}\n    */\n    res => this.compiler.compileTranslations(res, lang)), shareReplay(1), take(1));\n    this.loadingTranslations.subscribe({\n      next:\n      /**\n      * @param {?} res\n      * @return {?}\n      */\n      res => {\n        this.translations[lang] = this.extend && this.translations[lang] ? Object.assign(Object.assign({}, res), this.translations[lang]) : res;\n        this.updateLangs();\n        this.pending = false;\n      },\n      error:\n      /**\n      * @param {?} err\n      * @return {?}\n      */\n      err => {\n        this.pending = false;\n      }\n    });\n    return loadingTranslations;\n  }\n  /**\n   * Manually sets an object of translations for a given language\n   * after passing it through the compiler\n   * @param {?} lang\n   * @param {?} translations\n   * @param {?=} shouldMerge\n   * @return {?}\n   */\n\n\n  setTranslation(lang, translations, shouldMerge = false) {\n    translations = this.compiler.compileTranslations(translations, lang);\n\n    if ((shouldMerge || this.extend) && this.translations[lang]) {\n      this.translations[lang] = mergeDeep(this.translations[lang], translations);\n    } else {\n      this.translations[lang] = translations;\n    }\n\n    this.updateLangs();\n    this.onTranslationChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n  }\n  /**\n   * Returns an array of currently available langs\n   * @return {?}\n   */\n\n\n  getLangs() {\n    return this.langs;\n  }\n  /**\n   * Add available langs\n   * @param {?} langs\n   * @return {?}\n   */\n\n\n  addLangs(langs) {\n    langs.forEach(\n    /**\n    * @param {?} lang\n    * @return {?}\n    */\n    lang => {\n      if (this.langs.indexOf(lang) === -1) {\n        this.langs.push(lang);\n      }\n    });\n  }\n  /**\n   * Update the list of available langs\n   * @private\n   * @return {?}\n   */\n\n\n  updateLangs() {\n    this.addLangs(Object.keys(this.translations));\n  }\n  /**\n   * Returns the parsed result of the translations\n   * @param {?} translations\n   * @param {?} key\n   * @param {?=} interpolateParams\n   * @return {?}\n   */\n\n\n  getParsedResult(translations, key, interpolateParams) {\n    /** @type {?} */\n    let res;\n\n    if (key instanceof Array) {\n      /** @type {?} */\n      let result = {};\n      /** @type {?} */\n\n      let observables = false;\n\n      for (let k of key) {\n        result[k] = this.getParsedResult(translations, k, interpolateParams);\n\n        if (isObservable(result[k])) {\n          observables = true;\n        }\n      }\n\n      if (observables) {\n        /** @type {?} */\n        const sources = key.map(\n        /**\n        * @param {?} k\n        * @return {?}\n        */\n        k => isObservable(result[k]) ? result[k] : of(\n        /** @type {?} */\n        result[k]));\n        return forkJoin(sources).pipe(map(\n        /**\n        * @param {?} arr\n        * @return {?}\n        */\n        arr => {\n          /** @type {?} */\n          let obj = {};\n          arr.forEach(\n          /**\n          * @param {?} value\n          * @param {?} index\n          * @return {?}\n          */\n          (value, index) => {\n            obj[key[index]] = value;\n          });\n          return obj;\n        }));\n      }\n\n      return result;\n    }\n\n    if (translations) {\n      res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n    }\n\n    if (typeof res === \"undefined\" && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n      res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n    }\n\n    if (typeof res === \"undefined\") {\n      /** @type {?} */\n      let params = {\n        key,\n        translateService: this\n      };\n\n      if (typeof interpolateParams !== 'undefined') {\n        params.interpolateParams = interpolateParams;\n      }\n\n      res = this.missingTranslationHandler.handle(params);\n    }\n\n    return typeof res !== \"undefined\" ? res : key;\n  }\n  /**\n   * Gets the translated value of a key (or an array of keys)\n   * @param {?} key\n   * @param {?=} interpolateParams\n   * @return {?} the translated key, or an object of translated keys\n   */\n\n\n  get(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    } // check if we are loading a new translation to use\n\n\n    if (this.pending) {\n      return this.loadingTranslations.pipe(concatMap(\n      /**\n      * @param {?} res\n      * @return {?}\n      */\n      res => {\n        res = this.getParsedResult(res, key, interpolateParams);\n        return isObservable(res) ? res : of(res);\n      }));\n    } else {\n      /** @type {?} */\n      let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n      return isObservable(res) ? res : of(res);\n    }\n  }\n  /**\n   * Returns a stream of translated values of a key (or an array of keys) which updates\n   * whenever the translation changes.\n   * @param {?} key\n   * @param {?=} interpolateParams\n   * @return {?} A stream of the translated key, or an object of translated keys\n   */\n\n\n  getStreamOnTranslationChange(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n\n    return concat(defer(\n    /**\n    * @return {?}\n    */\n    () => this.get(key, interpolateParams)), this.onTranslationChange.pipe(switchMap(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      /** @type {?} */\n      const res = this.getParsedResult(event.translations, key, interpolateParams);\n\n      if (typeof res.subscribe === 'function') {\n        return res;\n      } else {\n        return of(res);\n      }\n    })));\n  }\n  /**\n   * Returns a stream of translated values of a key (or an array of keys) which updates\n   * whenever the language changes.\n   * @param {?} key\n   * @param {?=} interpolateParams\n   * @return {?} A stream of the translated key, or an object of translated keys\n   */\n\n\n  stream(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n\n    return concat(defer(\n    /**\n    * @return {?}\n    */\n    () => this.get(key, interpolateParams)), this.onLangChange.pipe(switchMap(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      /** @type {?} */\n      const res = this.getParsedResult(event.translations, key, interpolateParams);\n      return isObservable(res) ? res : of(res);\n    })));\n  }\n  /**\n   * Returns a translation instantly from the internal state of loaded translation.\n   * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n   * @param {?} key\n   * @param {?=} interpolateParams\n   * @return {?}\n   */\n\n\n  instant(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n    /** @type {?} */\n\n\n    let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n\n    if (isObservable(res)) {\n      if (key instanceof Array) {\n        /** @type {?} */\n        let obj = {};\n        key.forEach(\n        /**\n        * @param {?} value\n        * @param {?} index\n        * @return {?}\n        */\n        (value, index) => {\n          obj[key[index]] = key[index];\n        });\n        return obj;\n      }\n\n      return key;\n    } else {\n      return res;\n    }\n  }\n  /**\n   * Sets the translated value of a key, after compiling it\n   * @param {?} key\n   * @param {?} value\n   * @param {?=} lang\n   * @return {?}\n   */\n\n\n  set(key, value, lang = this.currentLang) {\n    this.translations[lang][key] = this.compiler.compile(value, lang);\n    this.updateLangs();\n    this.onTranslationChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n  }\n  /**\n   * Changes the current lang\n   * @private\n   * @param {?} lang\n   * @return {?}\n   */\n\n\n  changeLang(lang) {\n    this.currentLang = lang;\n    this.onLangChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    }); // if there is no default lang, use the one that we just set\n\n    if (this.defaultLang == null) {\n      this.changeDefaultLang(lang);\n    }\n  }\n  /**\n   * Changes the default lang\n   * @private\n   * @param {?} lang\n   * @return {?}\n   */\n\n\n  changeDefaultLang(lang) {\n    this.defaultLang = lang;\n    this.onDefaultLangChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n  }\n  /**\n   * Allows to reload the lang file from the file\n   * @param {?} lang\n   * @return {?}\n   */\n\n\n  reloadLang(lang) {\n    this.resetLang(lang);\n    return this.getTranslation(lang);\n  }\n  /**\n   * Deletes inner translation\n   * @param {?} lang\n   * @return {?}\n   */\n\n\n  resetLang(lang) {\n    this._translationRequests[lang] = undefined;\n    this.translations[lang] = undefined;\n  }\n  /**\n   * Returns the language code name from the browser, e.g. \"de\"\n   * @return {?}\n   */\n\n\n  getBrowserLang() {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n    /** @type {?} */\n\n\n    let browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n    if (typeof browserLang === 'undefined') {\n      return undefined;\n    }\n\n    if (browserLang.indexOf('-') !== -1) {\n      browserLang = browserLang.split('-')[0];\n    }\n\n    if (browserLang.indexOf('_') !== -1) {\n      browserLang = browserLang.split('_')[0];\n    }\n\n    return browserLang;\n  }\n  /**\n   * Returns the culture language code name from the browser, e.g. \"de-DE\"\n   * @return {?}\n   */\n\n\n  getBrowserCultureLang() {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n    /** @type {?} */\n\n\n    let browserCultureLang = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n    return browserCultureLang;\n  }\n\n}\n\nTranslateService.decorators = [{\n  type: Injectable\n}];\n/** @nocollapse */\n\nTranslateService.ctorParameters = () => [{\n  type: TranslateStore\n}, {\n  type: TranslateLoader\n}, {\n  type: TranslateCompiler\n}, {\n  type: TranslateParser\n}, {\n  type: MissingTranslationHandler\n}, {\n  type: Boolean,\n  decorators: [{\n    type: Inject,\n    args: [USE_DEFAULT_LANG]\n  }]\n}, {\n  type: Boolean,\n  decorators: [{\n    type: Inject,\n    args: [USE_STORE]\n  }]\n}, {\n  type: Boolean,\n  decorators: [{\n    type: Inject,\n    args: [USE_EXTEND]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Inject,\n    args: [DEFAULT_LANGUAGE]\n  }]\n}];\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  TranslateService.prototype.loadingTranslations;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype.pending;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype._onTranslationChange;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype._onLangChange;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype._onDefaultLangChange;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype._defaultLang;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype._currentLang;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype._langs;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype._translations;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype._translationRequests;\n  /** @type {?} */\n\n  TranslateService.prototype.store;\n  /** @type {?} */\n\n  TranslateService.prototype.currentLoader;\n  /** @type {?} */\n\n  TranslateService.prototype.compiler;\n  /** @type {?} */\n\n  TranslateService.prototype.parser;\n  /** @type {?} */\n\n  TranslateService.prototype.missingTranslationHandler;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype.useDefaultLang;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype.isolate;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype.extend;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass TranslateDirective {\n  /**\n   * @param {?} translateService\n   * @param {?} element\n   * @param {?} _ref\n   */\n  constructor(translateService, element, _ref) {\n    this.translateService = translateService;\n    this.element = element;\n    this._ref = _ref; // subscribe to onTranslationChange event, in case the translations of the current lang change\n\n    if (!this.onTranslationChangeSub) {\n      this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        if (event.lang === this.translateService.currentLang) {\n          this.checkNodes(true, event.translations);\n        }\n      });\n    } // subscribe to onLangChange event, in case the language changes\n\n\n    if (!this.onLangChangeSub) {\n      this.onLangChangeSub = this.translateService.onLangChange.subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        this.checkNodes(true, event.translations);\n      });\n    } // subscribe to onDefaultLangChange event, in case the default language changes\n\n\n    if (!this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        this.checkNodes(true);\n      });\n    }\n  }\n  /**\n   * @param {?} key\n   * @return {?}\n   */\n\n\n  set translate(key) {\n    if (key) {\n      this.key = key;\n      this.checkNodes();\n    }\n  }\n  /**\n   * @param {?} params\n   * @return {?}\n   */\n\n\n  set translateParams(params) {\n    if (!equals(this.currentParams, params)) {\n      this.currentParams = params;\n      this.checkNodes(true);\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngAfterViewChecked() {\n    this.checkNodes();\n  }\n  /**\n   * @param {?=} forceUpdate\n   * @param {?=} translations\n   * @return {?}\n   */\n\n\n  checkNodes(forceUpdate = false, translations) {\n    /** @type {?} */\n    let nodes = this.element.nativeElement.childNodes; // if the element is empty\n\n    if (!nodes.length) {\n      // we add the key as content\n      this.setContent(this.element.nativeElement, this.key);\n      nodes = this.element.nativeElement.childNodes;\n    }\n\n    for (let i = 0; i < nodes.length; ++i) {\n      /** @type {?} */\n      let node = nodes[i];\n\n      if (node.nodeType === 3) {\n        // node type 3 is a text node\n        // node type 3 is a text node\n\n        /** @type {?} */\n        let key;\n\n        if (forceUpdate) {\n          node.lastKey = null;\n        }\n\n        if (isDefined(node.lookupKey)) {\n          key = node.lookupKey;\n        } else if (this.key) {\n          key = this.key;\n        } else {\n          /** @type {?} */\n          let content = this.getContent(node);\n          /** @type {?} */\n\n          let trimmedContent = content.trim();\n\n          if (trimmedContent.length) {\n            node.lookupKey = trimmedContent; // we want to use the content as a key, not the translation value\n\n            if (content !== node.currentValue) {\n              key = trimmedContent; // the content was changed from the user, we'll use it as a reference if needed\n\n              node.originalContent = content || node.originalContent;\n            } else if (node.originalContent) {\n              // the content seems ok, but the lang has changed\n              // the current content is the translation, not the key, use the last real content as key\n              key = node.originalContent.trim();\n            } else if (content !== node.currentValue) {\n              // we want to use the content as a key, not the translation value\n              key = trimmedContent; // the content was changed from the user, we'll use it as a reference if needed\n\n              node.originalContent = content || node.originalContent;\n            }\n          }\n        }\n\n        this.updateValue(key, node, translations);\n      }\n    }\n  }\n  /**\n   * @param {?} key\n   * @param {?} node\n   * @param {?} translations\n   * @return {?}\n   */\n\n\n  updateValue(key, node, translations) {\n    if (key) {\n      if (node.lastKey === key && this.lastParams === this.currentParams) {\n        return;\n      }\n\n      this.lastParams = this.currentParams;\n      /** @type {?} */\n\n      let onTranslation =\n      /**\n      * @param {?} res\n      * @return {?}\n      */\n      res => {\n        if (res !== key) {\n          node.lastKey = key;\n        }\n\n        if (!node.originalContent) {\n          node.originalContent = this.getContent(node);\n        }\n\n        node.currentValue = isDefined(res) ? res : node.originalContent || key; // we replace in the original content to preserve spaces that we might have trimmed\n\n        this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n\n        this._ref.markForCheck();\n      };\n\n      if (isDefined(translations)) {\n        /** @type {?} */\n        let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n\n        if (isObservable(res)) {\n          res.subscribe(onTranslation);\n        } else {\n          onTranslation(res);\n        }\n      } else {\n        this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n      }\n    }\n  }\n  /**\n   * @param {?} node\n   * @return {?}\n   */\n\n\n  getContent(node) {\n    return isDefined(node.textContent) ? node.textContent : node.data;\n  }\n  /**\n   * @param {?} node\n   * @param {?} content\n   * @return {?}\n   */\n\n\n  setContent(node, content) {\n    if (isDefined(node.textContent)) {\n      node.textContent = content;\n    } else {\n      node.data = content;\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    if (this.onLangChangeSub) {\n      this.onLangChangeSub.unsubscribe();\n    }\n\n    if (this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub.unsubscribe();\n    }\n\n    if (this.onTranslationChangeSub) {\n      this.onTranslationChangeSub.unsubscribe();\n    }\n  }\n\n}\n\nTranslateDirective.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[translate],[ngx-translate]'\n  }]\n}];\n/** @nocollapse */\n\nTranslateDirective.ctorParameters = () => [{\n  type: TranslateService\n}, {\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}];\n\nTranslateDirective.propDecorators = {\n  translate: [{\n    type: Input\n  }],\n  translateParams: [{\n    type: Input\n  }]\n};\n\nif (false) {\n  /** @type {?} */\n  TranslateDirective.prototype.key;\n  /** @type {?} */\n\n  TranslateDirective.prototype.lastParams;\n  /** @type {?} */\n\n  TranslateDirective.prototype.currentParams;\n  /** @type {?} */\n\n  TranslateDirective.prototype.onLangChangeSub;\n  /** @type {?} */\n\n  TranslateDirective.prototype.onDefaultLangChangeSub;\n  /** @type {?} */\n\n  TranslateDirective.prototype.onTranslationChangeSub;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateDirective.prototype.translateService;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateDirective.prototype.element;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateDirective.prototype._ref;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.pipe.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass TranslatePipe {\n  /**\n   * @param {?} translate\n   * @param {?} _ref\n   */\n  constructor(translate, _ref) {\n    this.translate = translate;\n    this._ref = _ref;\n    this.value = '';\n  }\n  /**\n   * @param {?} key\n   * @param {?=} interpolateParams\n   * @param {?=} translations\n   * @return {?}\n   */\n\n\n  updateValue(key, interpolateParams, translations) {\n    /** @type {?} */\n    let onTranslation =\n    /**\n    * @param {?} res\n    * @return {?}\n    */\n    res => {\n      this.value = res !== undefined ? res : key;\n      this.lastKey = key;\n\n      this._ref.markForCheck();\n    };\n\n    if (translations) {\n      /** @type {?} */\n      let res = this.translate.getParsedResult(translations, key, interpolateParams);\n\n      if (isObservable(res.subscribe)) {\n        res.subscribe(onTranslation);\n      } else {\n        onTranslation(res);\n      }\n    }\n\n    this.translate.get(key, interpolateParams).subscribe(onTranslation);\n  }\n  /**\n   * @param {?} query\n   * @param {...?} args\n   * @return {?}\n   */\n\n\n  transform(query, ...args) {\n    if (!query || !query.length) {\n      return query;\n    } // if we ask another time for the same key, return the last value\n\n\n    if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n      return this.value;\n    }\n    /** @type {?} */\n\n\n    let interpolateParams;\n\n    if (isDefined(args[0]) && args.length) {\n      if (typeof args[0] === 'string' && args[0].length) {\n        // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n        // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n\n        /** @type {?} */\n        let validArgs = args[0].replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":').replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n\n        try {\n          interpolateParams = JSON.parse(validArgs);\n        } catch (e) {\n          throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n        }\n      } else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n        interpolateParams = args[0];\n      }\n    } // store the query, in case it changes\n\n\n    this.lastKey = query; // store the params, in case they change\n\n    this.lastParams = args; // set the value\n\n    this.updateValue(query, interpolateParams); // if there is a subscription to onLangChange, clean it\n\n    this._dispose(); // subscribe to onTranslationChange event, in case the translations change\n\n\n    if (!this.onTranslationChange) {\n      this.onTranslationChange = this.translate.onTranslationChange.subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        if (this.lastKey && event.lang === this.translate.currentLang) {\n          this.lastKey = null;\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    } // subscribe to onLangChange event, in case the language changes\n\n\n    if (!this.onLangChange) {\n      this.onLangChange = this.translate.onLangChange.subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    } // subscribe to onDefaultLangChange event, in case the default language changes\n\n\n    if (!this.onDefaultLangChange) {\n      this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(\n      /**\n      * @return {?}\n      */\n      () => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n\n          this.updateValue(query, interpolateParams);\n        }\n      });\n    }\n\n    return this.value;\n  }\n  /**\n   * Clean any existing subscription to change events\n   * @private\n   * @return {?}\n   */\n\n\n  _dispose() {\n    if (typeof this.onTranslationChange !== 'undefined') {\n      this.onTranslationChange.unsubscribe();\n      this.onTranslationChange = undefined;\n    }\n\n    if (typeof this.onLangChange !== 'undefined') {\n      this.onLangChange.unsubscribe();\n      this.onLangChange = undefined;\n    }\n\n    if (typeof this.onDefaultLangChange !== 'undefined') {\n      this.onDefaultLangChange.unsubscribe();\n      this.onDefaultLangChange = undefined;\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._dispose();\n  }\n\n}\n\nTranslatePipe.decorators = [{\n  type: Injectable\n}, {\n  type: Pipe,\n  args: [{\n    name: 'translate',\n    pure: false // required to update the value when the promise is resolved\n\n  }]\n}];\n/** @nocollapse */\n\nTranslatePipe.ctorParameters = () => [{\n  type: TranslateService\n}, {\n  type: ChangeDetectorRef\n}];\n\nif (false) {\n  /** @type {?} */\n  TranslatePipe.prototype.value;\n  /** @type {?} */\n\n  TranslatePipe.prototype.lastKey;\n  /** @type {?} */\n\n  TranslatePipe.prototype.lastParams;\n  /** @type {?} */\n\n  TranslatePipe.prototype.onTranslationChange;\n  /** @type {?} */\n\n  TranslatePipe.prototype.onLangChange;\n  /** @type {?} */\n\n  TranslatePipe.prototype.onDefaultLangChange;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslatePipe.prototype.translate;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslatePipe.prototype._ref;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @record\n */\n\n\nfunction TranslateModuleConfig() {}\n\nif (false) {\n  /** @type {?|undefined} */\n  TranslateModuleConfig.prototype.loader;\n  /** @type {?|undefined} */\n\n  TranslateModuleConfig.prototype.compiler;\n  /** @type {?|undefined} */\n\n  TranslateModuleConfig.prototype.parser;\n  /** @type {?|undefined} */\n\n  TranslateModuleConfig.prototype.missingTranslationHandler;\n  /** @type {?|undefined} */\n\n  TranslateModuleConfig.prototype.isolate;\n  /** @type {?|undefined} */\n\n  TranslateModuleConfig.prototype.extend;\n  /** @type {?|undefined} */\n\n  TranslateModuleConfig.prototype.useDefaultLang;\n  /** @type {?|undefined} */\n\n  TranslateModuleConfig.prototype.defaultLanguage;\n}\n\nclass TranslateModule {\n  /**\n   * Use this method in your root module to provide the TranslateService\n   * @param {?=} config\n   * @return {?}\n   */\n  static forRoot(config = {}) {\n    return {\n      ngModule: TranslateModule,\n      providers: [config.loader || {\n        provide: TranslateLoader,\n        useClass: TranslateFakeLoader\n      }, config.compiler || {\n        provide: TranslateCompiler,\n        useClass: TranslateFakeCompiler\n      }, config.parser || {\n        provide: TranslateParser,\n        useClass: TranslateDefaultParser\n      }, config.missingTranslationHandler || {\n        provide: MissingTranslationHandler,\n        useClass: FakeMissingTranslationHandler\n      }, TranslateStore, {\n        provide: USE_STORE,\n        useValue: config.isolate\n      }, {\n        provide: USE_DEFAULT_LANG,\n        useValue: config.useDefaultLang\n      }, {\n        provide: USE_EXTEND,\n        useValue: config.extend\n      }, {\n        provide: DEFAULT_LANGUAGE,\n        useValue: config.defaultLanguage\n      }, TranslateService]\n    };\n  }\n  /**\n   * Use this method in your other (non root) modules to import the directive/pipe\n   * @param {?=} config\n   * @return {?}\n   */\n\n\n  static forChild(config = {}) {\n    return {\n      ngModule: TranslateModule,\n      providers: [config.loader || {\n        provide: TranslateLoader,\n        useClass: TranslateFakeLoader\n      }, config.compiler || {\n        provide: TranslateCompiler,\n        useClass: TranslateFakeCompiler\n      }, config.parser || {\n        provide: TranslateParser,\n        useClass: TranslateDefaultParser\n      }, config.missingTranslationHandler || {\n        provide: MissingTranslationHandler,\n        useClass: FakeMissingTranslationHandler\n      }, {\n        provide: USE_STORE,\n        useValue: config.isolate\n      }, {\n        provide: USE_DEFAULT_LANG,\n        useValue: config.useDefaultLang\n      }, {\n        provide: USE_EXTEND,\n        useValue: config.extend\n      }, {\n        provide: DEFAULT_LANGUAGE,\n        useValue: config.defaultLanguage\n      }, TranslateService]\n    };\n  }\n\n}\n\nTranslateModule.decorators = [{\n  type: NgModule,\n  args: [{\n    declarations: [TranslatePipe, TranslateDirective],\n    exports: [TranslatePipe, TranslateDirective]\n  }]\n}];\n/**\n * @fileoverview added by tsickle\n * Generated from: ngx-translate-core.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DEFAULT_LANGUAGE, FakeMissingTranslationHandler, MissingTranslationHandler, TranslateCompiler, TranslateDefaultParser, TranslateDirective, TranslateFakeCompiler, TranslateFakeLoader, TranslateLoader, TranslateModule, TranslateParser, TranslatePipe, TranslateService, TranslateStore, USE_DEFAULT_LANG, USE_EXTEND, USE_STORE };","map":{"version":3,"names":["Injectable","EventEmitter","InjectionToken","Inject","Directive","ElementRef","ChangeDetectorRef","Input","Pipe","NgModule","of","isObservable","forkJoin","concat","defer","take","shareReplay","map","concatMap","switchMap","TranslateLoader","prototype","getTranslation","lang","TranslateFakeLoader","decorators","type","MissingTranslationHandlerParams","key","translateService","interpolateParams","MissingTranslationHandler","handle","params","FakeMissingTranslationHandler","equals","o1","o2","t1","t2","length","keySet","Array","isArray","Object","create","isDefined","value","isObject","item","mergeDeep","target","source","output","assign","keys","forEach","TranslateParser","interpolate","expr","getValue","TranslateDefaultParser","constructor","arguments","templateMatcher","result","interpolateString","interpolateFunction","split","shift","undefined","fn","replace","substring","b","r","TranslateCompiler","compile","compileTranslations","translations","TranslateFakeCompiler","TranslateStore","currentLang","defaultLang","langs","onTranslationChange","onLangChange","onDefaultLangChange","USE_STORE","USE_DEFAULT_LANG","DEFAULT_LANGUAGE","USE_EXTEND","TranslationChangeEvent","LangChangeEvent","DefaultLangChangeEvent","TranslateService","store","currentLoader","compiler","parser","missingTranslationHandler","useDefaultLang","isolate","extend","defaultLanguage","pending","_onTranslationChange","_onLangChange","_onDefaultLangChange","_langs","_translations","_translationRequests","setDefaultLang","_defaultLang","_currentLang","retrieveTranslations","pipe","subscribe","res","changeDefaultLang","getDefaultLang","use","changeLang","loadingTranslations","next","updateLangs","error","err","setTranslation","shouldMerge","emit","getLangs","addLangs","indexOf","push","getParsedResult","observables","k","sources","arr","obj","index","get","Error","getStreamOnTranslationChange","event","stream","instant","set","reloadLang","resetLang","getBrowserLang","window","navigator","browserLang","languages","language","browserLanguage","userLanguage","getBrowserCultureLang","browserCultureLang","ctorParameters","Boolean","args","String","TranslateDirective","element","_ref","onTranslationChangeSub","checkNodes","onLangChangeSub","onDefaultLangChangeSub","translate","translateParams","currentParams","ngAfterViewChecked","forceUpdate","nodes","nativeElement","childNodes","setContent","i","node","nodeType","lastKey","lookupKey","content","getContent","trimmedContent","trim","currentValue","originalContent","updateValue","lastParams","onTranslation","markForCheck","textContent","data","ngOnDestroy","unsubscribe","selector","propDecorators","TranslatePipe","transform","query","validArgs","JSON","parse","e","SyntaxError","_dispose","name","pure","TranslateModuleConfig","loader","TranslateModule","forRoot","config","ngModule","providers","provide","useClass","useValue","forChild","declarations","exports"],"sources":["/Users/christinalarow/node_modules/@ngx-translate/core/fesm2015/ngx-translate-core.js"],"sourcesContent":["import { Injectable, EventEmitter, InjectionToken, Inject, Directive, ElementRef, ChangeDetectorRef, Input, Pipe, NgModule } from '@angular/core';\nimport { of, isObservable, forkJoin, concat, defer } from 'rxjs';\nimport { take, shareReplay, map, concatMap, switchMap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.loader.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass TranslateLoader {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} lang\n     * @return {?}\n     */\n    TranslateLoader.prototype.getTranslation = function (lang) { };\n}\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\nclass TranslateFakeLoader extends TranslateLoader {\n    /**\n     * @param {?} lang\n     * @return {?}\n     */\n    getTranslation(lang) {\n        return of({});\n    }\n}\nTranslateFakeLoader.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/missing-translation-handler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction MissingTranslationHandlerParams() { }\nif (false) {\n    /**\n     * the key that's missing in translation files\n     * @type {?}\n     */\n    MissingTranslationHandlerParams.prototype.key;\n    /**\n     * an instance of the service that was unable to translate the key.\n     * @type {?}\n     */\n    MissingTranslationHandlerParams.prototype.translateService;\n    /**\n     * interpolation params that were passed along for translating the given key.\n     * @type {?|undefined}\n     */\n    MissingTranslationHandlerParams.prototype.interpolateParams;\n}\n/**\n * @abstract\n */\nclass MissingTranslationHandler {\n}\nif (false) {\n    /**\n     * A function that handles missing translations.\n     *\n     * @abstract\n     * @param {?} params context for resolving a missing translation\n     * @return {?} a value or an observable\n     * If it returns a value, then this value is used.\n     * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\n     * If it doesn't return then the key will be used as a value\n     */\n    MissingTranslationHandler.prototype.handle = function (params) { };\n}\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\nclass FakeMissingTranslationHandler {\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    handle(params) {\n        return params.key;\n    }\n}\nFakeMissingTranslationHandler.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/util.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/* tslint:disable */\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param {?} o1 Object or value to compare.\n * @param {?} o2 Object or value to compare.\n * @return {?} true if arguments are equal.\n */\nfunction equals(o1, o2) {\n    if (o1 === o2)\n        return true;\n    if (o1 === null || o2 === null)\n        return false;\n    if (o1 !== o1 && o2 !== o2)\n        return true; // NaN === NaN\n    // NaN === NaN\n    /** @type {?} */\n    let t1 = typeof o1;\n    /** @type {?} */\n    let t2 = typeof o2;\n    /** @type {?} */\n    let length;\n    /** @type {?} */\n    let key;\n    /** @type {?} */\n    let keySet;\n    if (t1 == t2 && t1 == 'object') {\n        if (Array.isArray(o1)) {\n            if (!Array.isArray(o2))\n                return false;\n            if ((length = o1.length) == o2.length) {\n                for (key = 0; key < length; key++) {\n                    if (!equals(o1[key], o2[key]))\n                        return false;\n                }\n                return true;\n            }\n        }\n        else {\n            if (Array.isArray(o2)) {\n                return false;\n            }\n            keySet = Object.create(null);\n            for (key in o1) {\n                if (!equals(o1[key], o2[key])) {\n                    return false;\n                }\n                keySet[key] = true;\n            }\n            for (key in o2) {\n                if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}\n/* tslint:enable */\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isDefined(value) {\n    return typeof value !== 'undefined' && value !== null;\n}\n/**\n * @param {?} item\n * @return {?}\n */\nfunction isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n/**\n * @param {?} target\n * @param {?} source\n * @return {?}\n */\nfunction mergeDeep(target, source) {\n    /** @type {?} */\n    let output = Object.assign({}, target);\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        (key) => {\n            if (isObject(source[key])) {\n                if (!(key in target)) {\n                    Object.assign(output, { [key]: source[key] });\n                }\n                else {\n                    output[key] = mergeDeep(target[key], source[key]);\n                }\n            }\n            else {\n                Object.assign(output, { [key]: source[key] });\n            }\n        }));\n    }\n    return output;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.parser.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass TranslateParser {\n}\nif (false) {\n    /**\n     * Interpolates a string to replace parameters\n     * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n     * @abstract\n     * @param {?} expr\n     * @param {?=} params\n     * @return {?}\n     */\n    TranslateParser.prototype.interpolate = function (expr, params) { };\n    /**\n     * Gets a value from an object by composed key\n     * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n     * @abstract\n     * @param {?} target\n     * @param {?} key\n     * @return {?}\n     */\n    TranslateParser.prototype.getValue = function (target, key) { };\n}\nclass TranslateDefaultParser extends TranslateParser {\n    constructor() {\n        super(...arguments);\n        this.templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\n    }\n    /**\n     * @param {?} expr\n     * @param {?=} params\n     * @return {?}\n     */\n    interpolate(expr, params) {\n        /** @type {?} */\n        let result;\n        if (typeof expr === 'string') {\n            result = this.interpolateString(expr, params);\n        }\n        else if (typeof expr === 'function') {\n            result = this.interpolateFunction(expr, params);\n        }\n        else {\n            // this should not happen, but an unrelated TranslateService test depends on it\n            result = (/** @type {?} */ (expr));\n        }\n        return result;\n    }\n    /**\n     * @param {?} target\n     * @param {?} key\n     * @return {?}\n     */\n    getValue(target, key) {\n        /** @type {?} */\n        let keys = typeof key === 'string' ? key.split('.') : [key];\n        key = '';\n        do {\n            key += keys.shift();\n            if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n                target = target[key];\n                key = '';\n            }\n            else if (!keys.length) {\n                target = undefined;\n            }\n            else {\n                key += '.';\n            }\n        } while (keys.length);\n        return target;\n    }\n    /**\n     * @private\n     * @param {?} fn\n     * @param {?=} params\n     * @return {?}\n     */\n    interpolateFunction(fn, params) {\n        return fn(params);\n    }\n    /**\n     * @private\n     * @param {?} expr\n     * @param {?=} params\n     * @return {?}\n     */\n    interpolateString(expr, params) {\n        if (!params) {\n            return expr;\n        }\n        return expr.replace(this.templateMatcher, (/**\n         * @param {?} substring\n         * @param {?} b\n         * @return {?}\n         */\n        (substring, b) => {\n            /** @type {?} */\n            let r = this.getValue(params, b);\n            return isDefined(r) ? r : substring;\n        }));\n    }\n}\nTranslateDefaultParser.decorators = [\n    { type: Injectable }\n];\nif (false) {\n    /** @type {?} */\n    TranslateDefaultParser.prototype.templateMatcher;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.compiler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass TranslateCompiler {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} value\n     * @param {?} lang\n     * @return {?}\n     */\n    TranslateCompiler.prototype.compile = function (value, lang) { };\n    /**\n     * @abstract\n     * @param {?} translations\n     * @param {?} lang\n     * @return {?}\n     */\n    TranslateCompiler.prototype.compileTranslations = function (translations, lang) { };\n}\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\nclass TranslateFakeCompiler extends TranslateCompiler {\n    /**\n     * @param {?} value\n     * @param {?} lang\n     * @return {?}\n     */\n    compile(value, lang) {\n        return value;\n    }\n    /**\n     * @param {?} translations\n     * @param {?} lang\n     * @return {?}\n     */\n    compileTranslations(translations, lang) {\n        return translations;\n    }\n}\nTranslateFakeCompiler.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.store.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TranslateStore {\n    constructor() {\n        /**\n         * The lang currently used\n         */\n        this.currentLang = this.defaultLang;\n        /**\n         * a list of translations per lang\n         */\n        this.translations = {};\n        /**\n         * an array of langs\n         */\n        this.langs = [];\n        /**\n         * An EventEmitter to listen to translation change events\n         * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n         *     // do something\n         * });\n         */\n        this.onTranslationChange = new EventEmitter();\n        /**\n         * An EventEmitter to listen to lang change events\n         * onLangChange.subscribe((params: LangChangeEvent) => {\n         *     // do something\n         * });\n         */\n        this.onLangChange = new EventEmitter();\n        /**\n         * An EventEmitter to listen to default lang change events\n         * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n         *     // do something\n         * });\n         */\n        this.onDefaultLangChange = new EventEmitter();\n    }\n}\nif (false) {\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     * @type {?}\n     */\n    TranslateStore.prototype.defaultLang;\n    /**\n     * The lang currently used\n     * @type {?}\n     */\n    TranslateStore.prototype.currentLang;\n    /**\n     * a list of translations per lang\n     * @type {?}\n     */\n    TranslateStore.prototype.translations;\n    /**\n     * an array of langs\n     * @type {?}\n     */\n    TranslateStore.prototype.langs;\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     * @type {?}\n     */\n    TranslateStore.prototype.onTranslationChange;\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {?}\n     */\n    TranslateStore.prototype.onLangChange;\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {?}\n     */\n    TranslateStore.prototype.onDefaultLangChange;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst USE_STORE = new InjectionToken('USE_STORE');\n/** @type {?} */\nconst USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\n/** @type {?} */\nconst DEFAULT_LANGUAGE = new InjectionToken('DEFAULT_LANGUAGE');\n/** @type {?} */\nconst USE_EXTEND = new InjectionToken('USE_EXTEND');\n/**\n * @record\n */\nfunction TranslationChangeEvent() { }\nif (false) {\n    /** @type {?} */\n    TranslationChangeEvent.prototype.translations;\n    /** @type {?} */\n    TranslationChangeEvent.prototype.lang;\n}\n/**\n * @record\n */\nfunction LangChangeEvent() { }\nif (false) {\n    /** @type {?} */\n    LangChangeEvent.prototype.lang;\n    /** @type {?} */\n    LangChangeEvent.prototype.translations;\n}\n/**\n * @record\n */\nfunction DefaultLangChangeEvent() { }\nif (false) {\n    /** @type {?} */\n    DefaultLangChangeEvent.prototype.lang;\n    /** @type {?} */\n    DefaultLangChangeEvent.prototype.translations;\n}\nclass TranslateService {\n    /**\n     *\n     * @param {?} store an instance of the store (that is supposed to be unique)\n     * @param {?} currentLoader An instance of the loader currently used\n     * @param {?} compiler An instance of the compiler currently used\n     * @param {?} parser An instance of the parser currently used\n     * @param {?} missingTranslationHandler A handler for missing translations.\n     * @param {?=} useDefaultLang whether we should use default language translation when current language translation is missing.\n     * @param {?=} isolate whether this service should use the store or not\n     * @param {?=} extend To make a child module extend (and use) translations from parent modules.\n     * @param {?=} defaultLanguage Set the default language using configuration\n     */\n    constructor(store, currentLoader, compiler, parser, missingTranslationHandler, useDefaultLang = true, isolate = false, extend = false, defaultLanguage) {\n        this.store = store;\n        this.currentLoader = currentLoader;\n        this.compiler = compiler;\n        this.parser = parser;\n        this.missingTranslationHandler = missingTranslationHandler;\n        this.useDefaultLang = useDefaultLang;\n        this.isolate = isolate;\n        this.extend = extend;\n        this.pending = false;\n        this._onTranslationChange = new EventEmitter();\n        this._onLangChange = new EventEmitter();\n        this._onDefaultLangChange = new EventEmitter();\n        this._langs = [];\n        this._translations = {};\n        this._translationRequests = {};\n        /** set the default language from configuration */\n        if (defaultLanguage) {\n            this.setDefaultLang(defaultLanguage);\n        }\n    }\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     * @return {?}\n     */\n    get onTranslationChange() {\n        return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n    }\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @return {?}\n     */\n    get onLangChange() {\n        return this.isolate ? this._onLangChange : this.store.onLangChange;\n    }\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @return {?}\n     */\n    get onDefaultLangChange() {\n        return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n    }\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     * @return {?}\n     */\n    get defaultLang() {\n        return this.isolate ? this._defaultLang : this.store.defaultLang;\n    }\n    /**\n     * @param {?} defaultLang\n     * @return {?}\n     */\n    set defaultLang(defaultLang) {\n        if (this.isolate) {\n            this._defaultLang = defaultLang;\n        }\n        else {\n            this.store.defaultLang = defaultLang;\n        }\n    }\n    /**\n     * The lang currently used\n     * @return {?}\n     */\n    get currentLang() {\n        return this.isolate ? this._currentLang : this.store.currentLang;\n    }\n    /**\n     * @param {?} currentLang\n     * @return {?}\n     */\n    set currentLang(currentLang) {\n        if (this.isolate) {\n            this._currentLang = currentLang;\n        }\n        else {\n            this.store.currentLang = currentLang;\n        }\n    }\n    /**\n     * an array of langs\n     * @return {?}\n     */\n    get langs() {\n        return this.isolate ? this._langs : this.store.langs;\n    }\n    /**\n     * @param {?} langs\n     * @return {?}\n     */\n    set langs(langs) {\n        if (this.isolate) {\n            this._langs = langs;\n        }\n        else {\n            this.store.langs = langs;\n        }\n    }\n    /**\n     * a list of translations per lang\n     * @return {?}\n     */\n    get translations() {\n        return this.isolate ? this._translations : this.store.translations;\n    }\n    /**\n     * @param {?} translations\n     * @return {?}\n     */\n    set translations(translations) {\n        if (this.isolate) {\n            this._translations = translations;\n        }\n        else {\n            this.store.translations = translations;\n        }\n    }\n    /**\n     * Sets the default language to use as a fallback\n     * @param {?} lang\n     * @return {?}\n     */\n    setDefaultLang(lang) {\n        if (lang === this.defaultLang) {\n            return;\n        }\n        /** @type {?} */\n        let pending = this.retrieveTranslations(lang);\n        if (typeof pending !== \"undefined\") {\n            // on init set the defaultLang immediately\n            if (this.defaultLang == null) {\n                this.defaultLang = lang;\n            }\n            pending.pipe(take(1))\n                .subscribe((/**\n             * @param {?} res\n             * @return {?}\n             */\n            (res) => {\n                this.changeDefaultLang(lang);\n            }));\n        }\n        else { // we already have this language\n            this.changeDefaultLang(lang);\n        }\n    }\n    /**\n     * Gets the default language used\n     * @return {?}\n     */\n    getDefaultLang() {\n        return this.defaultLang;\n    }\n    /**\n     * Changes the lang currently used\n     * @param {?} lang\n     * @return {?}\n     */\n    use(lang) {\n        // don't change the language if the language given is already selected\n        if (lang === this.currentLang) {\n            return of(this.translations[lang]);\n        }\n        /** @type {?} */\n        let pending = this.retrieveTranslations(lang);\n        if (typeof pending !== \"undefined\") {\n            // on init set the currentLang immediately\n            if (!this.currentLang) {\n                this.currentLang = lang;\n            }\n            pending.pipe(take(1))\n                .subscribe((/**\n             * @param {?} res\n             * @return {?}\n             */\n            (res) => {\n                this.changeLang(lang);\n            }));\n            return pending;\n        }\n        else { // we have this language, return an Observable\n            this.changeLang(lang);\n            return of(this.translations[lang]);\n        }\n    }\n    /**\n     * Retrieves the given translations\n     * @private\n     * @param {?} lang\n     * @return {?}\n     */\n    retrieveTranslations(lang) {\n        /** @type {?} */\n        let pending;\n        // if this language is unavailable or extend is true, ask for it\n        if (typeof this.translations[lang] === \"undefined\" || this.extend) {\n            this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n            pending = this._translationRequests[lang];\n        }\n        return pending;\n    }\n    /**\n     * Gets an object of translations for a given language with the current loader\n     * and passes it through the compiler\n     * @param {?} lang\n     * @return {?}\n     */\n    getTranslation(lang) {\n        this.pending = true;\n        /** @type {?} */\n        const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(shareReplay(1), take(1));\n        this.loadingTranslations = loadingTranslations.pipe(map((/**\n         * @param {?} res\n         * @return {?}\n         */\n        (res) => this.compiler.compileTranslations(res, lang))), shareReplay(1), take(1));\n        this.loadingTranslations\n            .subscribe({\n            next: (/**\n             * @param {?} res\n             * @return {?}\n             */\n            (res) => {\n                this.translations[lang] = this.extend && this.translations[lang] ? Object.assign(Object.assign({}, res), this.translations[lang]) : res;\n                this.updateLangs();\n                this.pending = false;\n            }),\n            error: (/**\n             * @param {?} err\n             * @return {?}\n             */\n            (err) => {\n                this.pending = false;\n            })\n        });\n        return loadingTranslations;\n    }\n    /**\n     * Manually sets an object of translations for a given language\n     * after passing it through the compiler\n     * @param {?} lang\n     * @param {?} translations\n     * @param {?=} shouldMerge\n     * @return {?}\n     */\n    setTranslation(lang, translations, shouldMerge = false) {\n        translations = this.compiler.compileTranslations(translations, lang);\n        if ((shouldMerge || this.extend) && this.translations[lang]) {\n            this.translations[lang] = mergeDeep(this.translations[lang], translations);\n        }\n        else {\n            this.translations[lang] = translations;\n        }\n        this.updateLangs();\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Returns an array of currently available langs\n     * @return {?}\n     */\n    getLangs() {\n        return this.langs;\n    }\n    /**\n     * Add available langs\n     * @param {?} langs\n     * @return {?}\n     */\n    addLangs(langs) {\n        langs.forEach((/**\n         * @param {?} lang\n         * @return {?}\n         */\n        (lang) => {\n            if (this.langs.indexOf(lang) === -1) {\n                this.langs.push(lang);\n            }\n        }));\n    }\n    /**\n     * Update the list of available langs\n     * @private\n     * @return {?}\n     */\n    updateLangs() {\n        this.addLangs(Object.keys(this.translations));\n    }\n    /**\n     * Returns the parsed result of the translations\n     * @param {?} translations\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?}\n     */\n    getParsedResult(translations, key, interpolateParams) {\n        /** @type {?} */\n        let res;\n        if (key instanceof Array) {\n            /** @type {?} */\n            let result = {};\n            /** @type {?} */\n            let observables = false;\n            for (let k of key) {\n                result[k] = this.getParsedResult(translations, k, interpolateParams);\n                if (isObservable(result[k])) {\n                    observables = true;\n                }\n            }\n            if (observables) {\n                /** @type {?} */\n                const sources = key.map((/**\n                 * @param {?} k\n                 * @return {?}\n                 */\n                k => isObservable(result[k]) ? result[k] : of((/** @type {?} */ (result[k])))));\n                return forkJoin(sources).pipe(map((/**\n                 * @param {?} arr\n                 * @return {?}\n                 */\n                (arr) => {\n                    /** @type {?} */\n                    let obj = {};\n                    arr.forEach((/**\n                     * @param {?} value\n                     * @param {?} index\n                     * @return {?}\n                     */\n                    (value, index) => {\n                        obj[key[index]] = value;\n                    }));\n                    return obj;\n                })));\n            }\n            return result;\n        }\n        if (translations) {\n            res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n        }\n        if (typeof res === \"undefined\" && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n            res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n        }\n        if (typeof res === \"undefined\") {\n            /** @type {?} */\n            let params = { key, translateService: this };\n            if (typeof interpolateParams !== 'undefined') {\n                params.interpolateParams = interpolateParams;\n            }\n            res = this.missingTranslationHandler.handle(params);\n        }\n        return typeof res !== \"undefined\" ? res : key;\n    }\n    /**\n     * Gets the translated value of a key (or an array of keys)\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?} the translated key, or an object of translated keys\n     */\n    get(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        // check if we are loading a new translation to use\n        if (this.pending) {\n            return this.loadingTranslations.pipe(concatMap((/**\n             * @param {?} res\n             * @return {?}\n             */\n            (res) => {\n                res = this.getParsedResult(res, key, interpolateParams);\n                return isObservable(res) ? res : of(res);\n            })));\n        }\n        else {\n            /** @type {?} */\n            let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n            return isObservable(res) ? res : of(res);\n        }\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the translation changes.\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?} A stream of the translated key, or an object of translated keys\n     */\n    getStreamOnTranslationChange(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        return concat(defer((/**\n         * @return {?}\n         */\n        () => this.get(key, interpolateParams))), this.onTranslationChange.pipe(switchMap((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            /** @type {?} */\n            const res = this.getParsedResult(event.translations, key, interpolateParams);\n            if (typeof res.subscribe === 'function') {\n                return res;\n            }\n            else {\n                return of(res);\n            }\n        }))));\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the language changes.\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?} A stream of the translated key, or an object of translated keys\n     */\n    stream(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        return concat(defer((/**\n         * @return {?}\n         */\n        () => this.get(key, interpolateParams))), this.onLangChange.pipe(switchMap((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            /** @type {?} */\n            const res = this.getParsedResult(event.translations, key, interpolateParams);\n            return isObservable(res) ? res : of(res);\n        }))));\n    }\n    /**\n     * Returns a translation instantly from the internal state of loaded translation.\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?}\n     */\n    instant(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        /** @type {?} */\n        let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n        if (isObservable(res)) {\n            if (key instanceof Array) {\n                /** @type {?} */\n                let obj = {};\n                key.forEach((/**\n                 * @param {?} value\n                 * @param {?} index\n                 * @return {?}\n                 */\n                (value, index) => {\n                    obj[key[index]] = key[index];\n                }));\n                return obj;\n            }\n            return key;\n        }\n        else {\n            return res;\n        }\n    }\n    /**\n     * Sets the translated value of a key, after compiling it\n     * @param {?} key\n     * @param {?} value\n     * @param {?=} lang\n     * @return {?}\n     */\n    set(key, value, lang = this.currentLang) {\n        this.translations[lang][key] = this.compiler.compile(value, lang);\n        this.updateLangs();\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Changes the current lang\n     * @private\n     * @param {?} lang\n     * @return {?}\n     */\n    changeLang(lang) {\n        this.currentLang = lang;\n        this.onLangChange.emit({ lang: lang, translations: this.translations[lang] });\n        // if there is no default lang, use the one that we just set\n        if (this.defaultLang == null) {\n            this.changeDefaultLang(lang);\n        }\n    }\n    /**\n     * Changes the default lang\n     * @private\n     * @param {?} lang\n     * @return {?}\n     */\n    changeDefaultLang(lang) {\n        this.defaultLang = lang;\n        this.onDefaultLangChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Allows to reload the lang file from the file\n     * @param {?} lang\n     * @return {?}\n     */\n    reloadLang(lang) {\n        this.resetLang(lang);\n        return this.getTranslation(lang);\n    }\n    /**\n     * Deletes inner translation\n     * @param {?} lang\n     * @return {?}\n     */\n    resetLang(lang) {\n        this._translationRequests[lang] = undefined;\n        this.translations[lang] = undefined;\n    }\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     * @return {?}\n     */\n    getBrowserLang() {\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n        /** @type {?} */\n        let browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n        if (typeof browserLang === 'undefined') {\n            return undefined;\n        }\n        if (browserLang.indexOf('-') !== -1) {\n            browserLang = browserLang.split('-')[0];\n        }\n        if (browserLang.indexOf('_') !== -1) {\n            browserLang = browserLang.split('_')[0];\n        }\n        return browserLang;\n    }\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     * @return {?}\n     */\n    getBrowserCultureLang() {\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n        /** @type {?} */\n        let browserCultureLang = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n        return browserCultureLang;\n    }\n}\nTranslateService.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nTranslateService.ctorParameters = () => [\n    { type: TranslateStore },\n    { type: TranslateLoader },\n    { type: TranslateCompiler },\n    { type: TranslateParser },\n    { type: MissingTranslationHandler },\n    { type: Boolean, decorators: [{ type: Inject, args: [USE_DEFAULT_LANG,] }] },\n    { type: Boolean, decorators: [{ type: Inject, args: [USE_STORE,] }] },\n    { type: Boolean, decorators: [{ type: Inject, args: [USE_EXTEND,] }] },\n    { type: String, decorators: [{ type: Inject, args: [DEFAULT_LANGUAGE,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype.loadingTranslations;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype.pending;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._onTranslationChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._onLangChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._onDefaultLangChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._defaultLang;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._currentLang;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._langs;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._translations;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._translationRequests;\n    /** @type {?} */\n    TranslateService.prototype.store;\n    /** @type {?} */\n    TranslateService.prototype.currentLoader;\n    /** @type {?} */\n    TranslateService.prototype.compiler;\n    /** @type {?} */\n    TranslateService.prototype.parser;\n    /** @type {?} */\n    TranslateService.prototype.missingTranslationHandler;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype.useDefaultLang;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype.isolate;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype.extend;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TranslateDirective {\n    /**\n     * @param {?} translateService\n     * @param {?} element\n     * @param {?} _ref\n     */\n    constructor(translateService, element, _ref) {\n        this.translateService = translateService;\n        this.element = element;\n        this._ref = _ref;\n        // subscribe to onTranslationChange event, in case the translations of the current lang change\n        if (!this.onTranslationChangeSub) {\n            this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                if (event.lang === this.translateService.currentLang) {\n                    this.checkNodes(true, event.translations);\n                }\n            }));\n        }\n        // subscribe to onLangChange event, in case the language changes\n        if (!this.onLangChangeSub) {\n            this.onLangChangeSub = this.translateService.onLangChange.subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                this.checkNodes(true, event.translations);\n            }));\n        }\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if (!this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                this.checkNodes(true);\n            }));\n        }\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    set translate(key) {\n        if (key) {\n            this.key = key;\n            this.checkNodes();\n        }\n    }\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    set translateParams(params) {\n        if (!equals(this.currentParams, params)) {\n            this.currentParams = params;\n            this.checkNodes(true);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() {\n        this.checkNodes();\n    }\n    /**\n     * @param {?=} forceUpdate\n     * @param {?=} translations\n     * @return {?}\n     */\n    checkNodes(forceUpdate = false, translations) {\n        /** @type {?} */\n        let nodes = this.element.nativeElement.childNodes;\n        // if the element is empty\n        if (!nodes.length) {\n            // we add the key as content\n            this.setContent(this.element.nativeElement, this.key);\n            nodes = this.element.nativeElement.childNodes;\n        }\n        for (let i = 0; i < nodes.length; ++i) {\n            /** @type {?} */\n            let node = nodes[i];\n            if (node.nodeType === 3) { // node type 3 is a text node\n                // node type 3 is a text node\n                /** @type {?} */\n                let key;\n                if (forceUpdate) {\n                    node.lastKey = null;\n                }\n                if (isDefined(node.lookupKey)) {\n                    key = node.lookupKey;\n                }\n                else if (this.key) {\n                    key = this.key;\n                }\n                else {\n                    /** @type {?} */\n                    let content = this.getContent(node);\n                    /** @type {?} */\n                    let trimmedContent = content.trim();\n                    if (trimmedContent.length) {\n                        node.lookupKey = trimmedContent;\n                        // we want to use the content as a key, not the translation value\n                        if (content !== node.currentValue) {\n                            key = trimmedContent;\n                            // the content was changed from the user, we'll use it as a reference if needed\n                            node.originalContent = content || node.originalContent;\n                        }\n                        else if (node.originalContent) { // the content seems ok, but the lang has changed\n                            // the current content is the translation, not the key, use the last real content as key\n                            key = node.originalContent.trim();\n                        }\n                        else if (content !== node.currentValue) {\n                            // we want to use the content as a key, not the translation value\n                            key = trimmedContent;\n                            // the content was changed from the user, we'll use it as a reference if needed\n                            node.originalContent = content || node.originalContent;\n                        }\n                    }\n                }\n                this.updateValue(key, node, translations);\n            }\n        }\n    }\n    /**\n     * @param {?} key\n     * @param {?} node\n     * @param {?} translations\n     * @return {?}\n     */\n    updateValue(key, node, translations) {\n        if (key) {\n            if (node.lastKey === key && this.lastParams === this.currentParams) {\n                return;\n            }\n            this.lastParams = this.currentParams;\n            /** @type {?} */\n            let onTranslation = (/**\n             * @param {?} res\n             * @return {?}\n             */\n            (res) => {\n                if (res !== key) {\n                    node.lastKey = key;\n                }\n                if (!node.originalContent) {\n                    node.originalContent = this.getContent(node);\n                }\n                node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n                // we replace in the original content to preserve spaces that we might have trimmed\n                this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n                this._ref.markForCheck();\n            });\n            if (isDefined(translations)) {\n                /** @type {?} */\n                let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n                if (isObservable(res)) {\n                    res.subscribe(onTranslation);\n                }\n                else {\n                    onTranslation(res);\n                }\n            }\n            else {\n                this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n            }\n        }\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    getContent(node) {\n        return isDefined(node.textContent) ? node.textContent : node.data;\n    }\n    /**\n     * @param {?} node\n     * @param {?} content\n     * @return {?}\n     */\n    setContent(node, content) {\n        if (isDefined(node.textContent)) {\n            node.textContent = content;\n        }\n        else {\n            node.data = content;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.onLangChangeSub) {\n            this.onLangChangeSub.unsubscribe();\n        }\n        if (this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub.unsubscribe();\n        }\n        if (this.onTranslationChangeSub) {\n            this.onTranslationChangeSub.unsubscribe();\n        }\n    }\n}\nTranslateDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[translate],[ngx-translate]'\n            },] }\n];\n/** @nocollapse */\nTranslateDirective.ctorParameters = () => [\n    { type: TranslateService },\n    { type: ElementRef },\n    { type: ChangeDetectorRef }\n];\nTranslateDirective.propDecorators = {\n    translate: [{ type: Input }],\n    translateParams: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    TranslateDirective.prototype.key;\n    /** @type {?} */\n    TranslateDirective.prototype.lastParams;\n    /** @type {?} */\n    TranslateDirective.prototype.currentParams;\n    /** @type {?} */\n    TranslateDirective.prototype.onLangChangeSub;\n    /** @type {?} */\n    TranslateDirective.prototype.onDefaultLangChangeSub;\n    /** @type {?} */\n    TranslateDirective.prototype.onTranslationChangeSub;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateDirective.prototype.translateService;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateDirective.prototype.element;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateDirective.prototype._ref;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.pipe.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TranslatePipe {\n    /**\n     * @param {?} translate\n     * @param {?} _ref\n     */\n    constructor(translate, _ref) {\n        this.translate = translate;\n        this._ref = _ref;\n        this.value = '';\n    }\n    /**\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @param {?=} translations\n     * @return {?}\n     */\n    updateValue(key, interpolateParams, translations) {\n        /** @type {?} */\n        let onTranslation = (/**\n         * @param {?} res\n         * @return {?}\n         */\n        (res) => {\n            this.value = res !== undefined ? res : key;\n            this.lastKey = key;\n            this._ref.markForCheck();\n        });\n        if (translations) {\n            /** @type {?} */\n            let res = this.translate.getParsedResult(translations, key, interpolateParams);\n            if (isObservable(res.subscribe)) {\n                res.subscribe(onTranslation);\n            }\n            else {\n                onTranslation(res);\n            }\n        }\n        this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    }\n    /**\n     * @param {?} query\n     * @param {...?} args\n     * @return {?}\n     */\n    transform(query, ...args) {\n        if (!query || !query.length) {\n            return query;\n        }\n        // if we ask another time for the same key, return the last value\n        if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n            return this.value;\n        }\n        /** @type {?} */\n        let interpolateParams;\n        if (isDefined(args[0]) && args.length) {\n            if (typeof args[0] === 'string' && args[0].length) {\n                // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n                // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n                /** @type {?} */\n                let validArgs = args[0]\n                    .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\n                    .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n                try {\n                    interpolateParams = JSON.parse(validArgs);\n                }\n                catch (e) {\n                    throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n                }\n            }\n            else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n                interpolateParams = args[0];\n            }\n        }\n        // store the query, in case it changes\n        this.lastKey = query;\n        // store the params, in case they change\n        this.lastParams = args;\n        // set the value\n        this.updateValue(query, interpolateParams);\n        // if there is a subscription to onLangChange, clean it\n        this._dispose();\n        // subscribe to onTranslationChange event, in case the translations change\n        if (!this.onTranslationChange) {\n            this.onTranslationChange = this.translate.onTranslationChange.subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                if (this.lastKey && event.lang === this.translate.currentLang) {\n                    this.lastKey = null;\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            }));\n        }\n        // subscribe to onLangChange event, in case the language changes\n        if (!this.onLangChange) {\n            this.onLangChange = this.translate.onLangChange.subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                if (this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            }));\n        }\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if (!this.onDefaultLangChange) {\n            this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe((/**\n             * @return {?}\n             */\n            () => {\n                if (this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams);\n                }\n            }));\n        }\n        return this.value;\n    }\n    /**\n     * Clean any existing subscription to change events\n     * @private\n     * @return {?}\n     */\n    _dispose() {\n        if (typeof this.onTranslationChange !== 'undefined') {\n            this.onTranslationChange.unsubscribe();\n            this.onTranslationChange = undefined;\n        }\n        if (typeof this.onLangChange !== 'undefined') {\n            this.onLangChange.unsubscribe();\n            this.onLangChange = undefined;\n        }\n        if (typeof this.onDefaultLangChange !== 'undefined') {\n            this.onDefaultLangChange.unsubscribe();\n            this.onDefaultLangChange = undefined;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._dispose();\n    }\n}\nTranslatePipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{\n                name: 'translate',\n                pure: false // required to update the value when the promise is resolved\n            },] }\n];\n/** @nocollapse */\nTranslatePipe.ctorParameters = () => [\n    { type: TranslateService },\n    { type: ChangeDetectorRef }\n];\nif (false) {\n    /** @type {?} */\n    TranslatePipe.prototype.value;\n    /** @type {?} */\n    TranslatePipe.prototype.lastKey;\n    /** @type {?} */\n    TranslatePipe.prototype.lastParams;\n    /** @type {?} */\n    TranslatePipe.prototype.onTranslationChange;\n    /** @type {?} */\n    TranslatePipe.prototype.onLangChange;\n    /** @type {?} */\n    TranslatePipe.prototype.onDefaultLangChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslatePipe.prototype.translate;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslatePipe.prototype._ref;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction TranslateModuleConfig() { }\nif (false) {\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.loader;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.compiler;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.parser;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.missingTranslationHandler;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.isolate;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.extend;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.useDefaultLang;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.defaultLanguage;\n}\nclass TranslateModule {\n    /**\n     * Use this method in your root module to provide the TranslateService\n     * @param {?=} config\n     * @return {?}\n     */\n    static forRoot(config = {}) {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\n                TranslateStore,\n                { provide: USE_STORE, useValue: config.isolate },\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\n                { provide: USE_EXTEND, useValue: config.extend },\n                { provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage },\n                TranslateService\n            ]\n        };\n    }\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     * @param {?=} config\n     * @return {?}\n     */\n    static forChild(config = {}) {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\n                { provide: USE_STORE, useValue: config.isolate },\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\n                { provide: USE_EXTEND, useValue: config.extend },\n                { provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage },\n                TranslateService\n            ]\n        };\n    }\n}\nTranslateModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    TranslatePipe,\n                    TranslateDirective\n                ],\n                exports: [\n                    TranslatePipe,\n                    TranslateDirective\n                ]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ngx-translate-core.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DEFAULT_LANGUAGE, FakeMissingTranslationHandler, MissingTranslationHandler, TranslateCompiler, TranslateDefaultParser, TranslateDirective, TranslateFakeCompiler, TranslateFakeLoader, TranslateLoader, TranslateModule, TranslateParser, TranslatePipe, TranslateService, TranslateStore, USE_DEFAULT_LANG, USE_EXTEND, USE_STORE };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}